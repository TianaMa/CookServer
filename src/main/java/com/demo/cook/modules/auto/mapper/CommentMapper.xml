<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.cook.modules.auto.mapper.CommentMapper">
  <resultMap id="BaseResultMap" type="com.demo.cook.modules.auto.model.Comment">
    <constructor>
      <idArg column="commentId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="targetId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="parentId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="content" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="replyId" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="createTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="commentUser" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    commentId, targetId, parentId, content, replyId, createTime, commentUser
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_user_comment
    where commentId = #{commentId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_user_comment
    where commentId = #{commentId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.demo.cook.modules.auto.model.Comment">
    insert into t_user_comment (commentId, targetId, parentId, 
      content, replyId, createTime, 
      commentUser)
    values (#{commentId,jdbcType=VARCHAR}, #{targetId,jdbcType=VARCHAR}, #{parentId,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{replyId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{commentUser,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.demo.cook.modules.auto.model.Comment">
    insert into t_user_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        commentId,
      </if>
      <if test="targetId != null">
        targetId,
      </if>
      <if test="parentId != null">
        parentId,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="replyId != null">
        replyId,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="commentUser != null">
        commentUser,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=VARCHAR},
      </if>
      <if test="targetId != null">
        #{targetId,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyId != null">
        #{replyId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentUser != null">
        #{commentUser,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.cook.modules.auto.model.Comment">
    update t_user_comment
    <set>
      <if test="targetId != null">
        targetId = #{targetId,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parentId = #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyId != null">
        replyId = #{replyId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentUser != null">
        commentUser = #{commentUser,jdbcType=VARCHAR},
      </if>
    </set>
    where commentId = #{commentId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.cook.modules.auto.model.Comment">
    update t_user_comment
    set targetId = #{targetId,jdbcType=VARCHAR},
      parentId = #{parentId,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      replyId = #{replyId,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      commentUser = #{commentUser,jdbcType=VARCHAR}
    where commentId = #{commentId,jdbcType=VARCHAR}
  </update>
</mapper>